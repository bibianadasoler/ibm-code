jvmmem = 1024)
print(nl.sobol.random)
report_model_parameters(nl.sobol.random)
#### STEP 2 experiment----
nl.sobol.random@experiment <- experiment(expname = "sobol_random500-raw",
outpath = "C:\\Users\\bibia\\OneDrive\\Doutorado\\Predicao_ferrovias\\ibm-code\\results",
repetition = 10,
tickmetrics = "false",
idsetup = "setup",
idgo = "go",
runtime = 500,
metrics = c("(count patches)",
"count patches with [habitat = 1]",
"count patches with [habitat = 2]",
"mean [hab_neighbors] of patches with [habitat = 0]",
"sum [visits] of patches with [habitat = 0]",
"assess-top-sections"),
variables = list("proportion-of-habitat" = list(min = 10, max = 90, qfun = "qunif"),
"matrix-permeability" = list(min = 0.1, max = 0.9, qfun = "qunif"),
"perceptual-range" = list(min = 5, max = 20, qfun = "qunif"),
"vision-angle" = list(min = 90, max = 180, qfun = "qunif")),
constants = list("number-of-individuals" = 100,
"steps" = 500,
"scenario" = 8,
"save-data?" = "true"))
#eval_variables_constants(nl.sobol.random)
print(nl.sobol.random)
#### STEP 3 simulation design----
nl.sobol.random@simdesign <- simdesign_sobol(nl = nl.sobol.random,
samples = 90,
sobolorder = 2,
sobolnboot = 100,
sobolconf = 0.95,
nseeds = 1,
precision = 3)
nl.sobol.random@simdesign
#### STEP 2 experiment----
nl.sobol.random@experiment <- experiment(expname = "sobol_random500-raw",
outpath = "C:\\Users\\bibia\\OneDrive\\Doutorado\\Predicao_ferrovias\\ibm-code\\results",
repetition = 20,
tickmetrics = "false",
idsetup = "setup",
idgo = "go",
runtime = 500,
metrics = c("(count patches)",
"count patches with [habitat = 1]",
"count patches with [habitat = 2]",
"mean [hab_neighbors] of patches with [habitat = 0]",
"sum [visits] of patches with [habitat = 0]",
"assess-top-sections"),
variables = list("proportion-of-habitat" = list(min = 10, max = 90, qfun = "qunif"),
"matrix-permeability" = list(min = 0.1, max = 0.9, qfun = "qunif"),
"perceptual-range" = list(min = 5, max = 20, qfun = "qunif"),
"vision-angle" = list(min = 90, max = 180, qfun = "qunif")),
constants = list("number-of-individuals" = 100,
"steps" = 500,
"scenario" = 8,
"save-data?" = "true"))
#eval_variables_constants(nl.sobol.random)
print(nl.sobol.random)
#### STEP 3 simulation design----
nl.sobol.random@simdesign <- simdesign_sobol(nl = nl.sobol.random,
samples = 90,
sobolorder = 2,
sobolnboot = 100,
sobolconf = 0.95,
nseeds = 1,
precision = 3)
#eval_variables_constants(nl.sobol.random)
print(nl.sobol.random)
nl.sobol.random@simdesign
#nl.sobol.random@simdesign@siminput %>%
#   dplyr::group_by(`proportion-of-habitat`) %>% print(n = 600)
#nl.sobol.random@simdesign@siminput %>%
#   with(., table(`vision-angle`))
hist(nl.sobol.random@simdesign@siminput$`proportion-of-habitat`, breaks = 20)
hist(nl.sobol.random@simdesign@siminput$`matrix-permeability`, breaks = 20)
hist(nl.sobol.random@simdesign@siminput$`perceptual-range`, breaks = 5)
hist(nl.sobol.random@simdesign@siminput$`vision-angle`, xlim = c(90, 180), breaks = c(90, 120, 150, 180))
#### STEP 4 run simulation----
teste <- run_nl_one(nl.sobol.random, getsim(nl.sobol.random,"simseeds")[1], 2)
View(teste)
rm(teste)
#### STEP 2 experiment----
nl.sobol.random@experiment <- experiment(expname = "sobol_random500-raw",
outpath = "C:\\Users\\bibia\\OneDrive\\Doutorado\\Predicao_ferrovias\\ibm-code\\results",
repetition = 20,
tickmetrics = "false",
idsetup = "setup",
idgo = "go",
runtime = 500,
metrics = c("(count patches)",
"count patches with [habitat = 1]",
"count patches with [habitat = 2]",
"mean [hab_neighbors] of patches with [habitat = 0]",
"sum [visits] of patches with [habitat = 0]",
"assess-top-sections"),
variables = list("proportion-of-habitat" = list(min = 10, max = 90, qfun = "qunif"),
"matrix-permeability" = list(min = 0.1, max = 0.9, qfun = "qunif"),
"perceptual-range" = list(min = 5, max = 20, qfun = "qunif"),
"vision-angle" = list(min = 90, max = 180, qfun = "qunif")),
constants = list("number-of-individuals" = 100,
"steps" = 500,
"scenario" = 8,
"save-data?" = "true"))
#eval_variables_constants(nl.sobol.random)
print(nl.sobol.random)
#### STEP 3 simulation design----
nl.sobol.random@simdesign <- simdesign_sobol(nl = nl.sobol.random,
samples = 90,
sobolorder = 2,
sobolnboot = 100,
sobolconf = 0.95,
nseeds = 1,
precision = 3)
nl.sobol.random@simdesign
#nl.sobol.random@simdesign@siminput %>%
#   dplyr::group_by(`proportion-of-habitat`) %>% print(n = 600)
#nl.sobol.random@simdesign@siminput %>%
#   with(., table(`vision-angle`))
hist(nl.sobol.random@simdesign@siminput$`proportion-of-habitat`, breaks = 20)
hist(nl.sobol.random@simdesign@siminput$`matrix-permeability`, breaks = 20)
hist(nl.sobol.random@simdesign@siminput$`perceptual-range`, breaks = 5)
hist(nl.sobol.random@simdesign@siminput$`vision-angle`, xlim = c(90, 180), breaks = c(90, 120, 150, 180))
library(nlrx)
#Sys.setenv(JAVA_HOME = "/Library/Java/JavaVirtualMachines/jdk-11.jdk/Contents/Home")
Sys.setenv(JAVA_HOME = "C:\\Program Files\\Java\\jdk-11")
### Sensitivity analyses - Sobol ----
#### STEP 1: create a nl object -----
netlogopath.mac <- file.path("C:\\Program Files\\NetLogo 6.0.4")
modelpath.mac <- file.path("C:\\Users\\bibia\\OneDrive\\Doutorado\\Predicao_ferrovias\\ibm-code\\crossings.nlogo")
nl.sobol.random <- nl(nlversion = "6.0.4",
nlpath = netlogopath.mac,
modelpath = modelpath.mac,
jvmmem = 1024)
print(nl.sobol.random)
report_model_parameters(nl.sobol.random)
#### STEP 2 experiment----
nl.sobol.random@experiment <- experiment(expname = "sobol_random500-raw",
outpath = "C:\\Users\\bibia\\OneDrive\\Doutorado\\Predicao_ferrovias\\ibm-code\\results",
repetition = 20,
tickmetrics = "false",
idsetup = "setup",
idgo = "go",
runtime = 500,
metrics = c("(count patches)",
"count patches with [habitat = 1]",
"count patches with [habitat = 2]",
"mean [hab_neighbors] of patches with [habitat = 0]",
"sum [visits] of patches with [habitat = 0]",
"assess-top-sections"),
variables = list("proportion-of-habitat" = list(min = 10, max = 90, qfun = "qunif"),
"matrix-permeability" = list(min = 0.1, max = 0.9, qfun = "qunif"),
"perceptual-range" = list(min = 5, max = 20, qfun = "qunif"),
"vision-angle" = list(min = 90, max = 180, qfun = "qunif")),
constants = list("number-of-individuals" = 100,
"steps" = 500,
"scenario" = 8,
"save-data?" = "true"))
#eval_variables_constants(nl.sobol.random)
print(nl.sobol.random)
#### STEP 3 simulation design----
nl.sobol.random@simdesign <- simdesign_sobol(nl = nl.sobol.random,
samples = 90,
sobolorder = 2,
sobolnboot = 100,
sobolconf = 0.95,
nseeds = 1,
precision = 3)
nl.sobol.random@simdesign
#nl.sobol.random@simdesign@siminput %>%
#   dplyr::group_by(`proportion-of-habitat`) %>% print(n = 600)
#nl.sobol.random@simdesign@siminput %>%
#   with(., table(`vision-angle`))
hist(nl.sobol.random@simdesign@siminput$`proportion-of-habitat`, breaks = 20)
hist(nl.sobol.random@simdesign@siminput$`matrix-permeability`, breaks = 20)
hist(nl.sobol.random@simdesign@siminput$`perceptual-range`, breaks = 5)
hist(nl.sobol.random@simdesign@siminput$`vision-angle`, xlim = c(90, 180), breaks = c(90, 120, 150, 180))
library(future)
plan(multisession)
progressr::handlers("progress")
raw.results.sobol.random <- progressr::with_progress(run_nl_all(nl.sobol.random))
#### STEP 3 simulation design----
nl.sobol.random@simdesign <- simdesign_sobol(nl = nl.sobol.random,
samples = 80,
sobolorder = 2,
sobolnboot = 100,
sobolconf = 0.95,
nseeds = 1,
precision = 3)
nl.sobol.random@simdesign
#nl.sobol.random@simdesign@siminput %>%
#   dplyr::group_by(`proportion-of-habitat`) %>% print(n = 600)
#nl.sobol.random@simdesign@siminput %>%
#   with(., table(`vision-angle`))
hist(nl.sobol.random@simdesign@siminput$`proportion-of-habitat`, breaks = 20)
hist(nl.sobol.random@simdesign@siminput$`matrix-permeability`, breaks = 20)
hist(nl.sobol.random@simdesign@siminput$`perceptual-range`, breaks = 5)
hist(nl.sobol.random@simdesign@siminput$`vision-angle`, xlim = c(90, 180), breaks = c(90, 120, 150, 180))
#nl.sobol.random@simdesign@siminput %>%
#   dplyr::group_by(`proportion-of-habitat`) %>% print(n = 600)
#nl.sobol.random@simdesign@siminput %>%
#   with(., table(`vision-angle`))
hist(nl.sobol.random@simdesign@siminput$`proportion-of-habitat`, breaks = 20)
# numero de patches em cada raster
library(terra)
# abrindo o raster
rast("Ëœ/results/rasters/538C.asc")
# abrindo o raster
rast("~/results/rasters/538C.asc")
# abrindo o raster
rast(path = "~/results/rasters/538C.asc")
# abrindo o raster
rast(system.file("~/results/rasters/538C.asc", package = "terra"))
rast("/Users/bibianaterra/Library/CloudStorage/OneDrive-Personal/Doutorado/Predicao_ferrovias/ibm-code/results/rasters/538C.asc")
# abrindo o raster
raster <- rast("/Users/bibianaterra/Library/CloudStorage/OneDrive-Personal/Doutorado/Predicao_ferrovias/ibm-code/results/rasters/538C.asc")
plot(raster)
# abrindo o raster
raster <- rast("/results/rasters/538C.asc")
# abrindo o raster
raster <- rast("./results/rasters/538C.asc")
plot(raster)
# abrindo o raster
raster <- rast("./results/rasters/538C.asc")
plot(raster)
library(landscapemetrics)
raster
raster$538C
raster@ptr
summary(raster)
# numbero de manchas
manchas <- get_patches(raster, to_disk = getOption("to_disk", default = TRUE))
manchas
plot(raster)
# numbero de manchas
manchas <- get_patches(raster, class = c(1, 2), to_disk = getOption("to_disk", default = TRUE))
# numbero de manchas
manchas <- get_patches(raster, class = 1, to_disk = getOption("to_disk", default = TRUE))
manchas
View(manchas)
# numbero de manchas
manchas <- get_patches(raster, class = c("class_1", "class_2"), to_disk = getOption("to_disk", default = TRUE))
# numbero de manchas
show_patches(raster)
# numbero de manchas
show_patches(raster, class = "all", labels = T)
# numbero de manchas
show_patches(raster, class = "all", labels = T)
# numbero de manchas
show_patches(raster, class = "all")
manchas
manchas <- get_patches(raster, class = "all", to_disk = getOption("to_disk", default = TRUE))
manchas
get_unique_values(rastr)
get_unique_values(raster)
get_unique_values(raster, simplify = F)
get_unique_values(raster, simplify = T)
manchas$layer_1
manchas$layer_1$class_0
manchas$layer_1$class_0$layer
manchas$layer_1$class_0$layer$layer
t
plot(raster)
# numero de patches em cada raster
library(terra)
# abrindo o raster
raster <- rast("./results/rasters/538C.asc")
plot(raster, color)
plot(raster, col = terrain.colors(3))
plot(raster, col = terrain.colors(2))
plot(raster, col = terrain.colors(4))
plot(raster, col = c("black", "green", "white")))
plot(raster, col = c("black", "green", "white"))
plot(raster, col = c("black", "green2", "white"))
manchas <- get_patches(raster, class = 1, to_disk = getOption("to_disk", default = TRUE))
manchas
nrow(terra::unique(manchas)
nrow(terra::unique(manchas))
manchas
manchas[[1]]
manchas[[1]][[1]]
manchas[[1]][[1]]
nrow(terra::unique(manchas[[1]][[1]]))
manchas <- get_patches(raster, class = 1, to_disk = getOption("to_disk", default = TRUE))
nrow(terra::unique(manchas[[1]][[1]]))
manchas <- get_patches(raster, class = 1)
nrow(terra::unique(manchas[[1]][[1]]))
nrow(terra::unique(manchas[[1]]))
nrow(terra::unique(manchas[1]))
nrow(terra::unique(manchas[1][1]))
nrow(terra::unique(manchas[[1]][1]))
manchas <- get_patches(raster, class = "all")
nrow(terra::unique(manchas[[1]][1]))
manchas[[1]][[1]]
manchas[[1]]
manchas[[1]][3]
nrow(terra::unique(manchas[[1]][3]))
manchas[1][3]
manchas <- get_patches(raster, class = "all")
manchas
View(manchas)
manchas[1][3]
manchas[[1]][3]
manchas[[1]][3]$class_2
manchas[[1]][[3]]
manchas[["layer_1"]][["class_2"]]
manchas[["layer_1"]][["class_2"]]@history
manchas[["layer_1"]][["class_2"]]@z
manchas[["layer_1"]][["class_2"]]@srs
manchas[["layer_1"]][["class_2"]]@crs
manchas[["layer_1"]][["class_2"]]@nrows
manchas[["layer_1"]][["class_2"]]@rotation
manchas[["layer_1"]][["class_2"]]@legend
manchas[["layer_1"]][["class_2"]]@title
manchas
manchas[["layer_1"]]
manchas[["layer_1"]][["class_2"]]
nrow(terra::unique(manchas[["layer_1"]][["class_2"]]))
nrow(terra::unique(manchas[["layer_1"]][["class_1"]]))
nrow(unique(manchas[["layer_1"]][["class_1"]]))
# numbero de manchas
show_patches(raster, class = "all")
manchas <- get_patches(raster, class = "class_1")
# numbero de manchas
show_patches(raster, class = "class_1")
# numbero de manchas
show_patches(raster, class = 1)
# numero de patches em cada raster
library(terra)
manchas <- get_patches(raster, class = 1)
manchas
nrow(unique(manchas[["layer_1"]][["class_1"]]))
manchas[[1]][[3]]
manchas[[1]][[1]]
nrow(unique(manchas[["layer_1"]]))
nrow(unique(manchas[["layer_1"]]["class_1"]))
nrow(unique(manchas["layer_1"][["class_1"]]))
nrow(unique(manchas["layer_1"]["class_1"]))
unique(manchas["layer_1"]["class_1"])
lenght(unique(manchas["layer_1"]["class_1"]))
length(unique(manchas["layer_1"]["class_1"]))
length(terra::unique(manchas["layer_1"]["class_1"]))
manchas <- get_patches(raster, class = 1)
length(terra::unique(manchas["layer_1"]["class_1"]))
manchas
length(terra::unique(manchas$layer_1$class_1))
nrow(terra::unique(manchas$layer_1$class_1))
terra::unique(manchas$layer_1$class_1)
length(terra::unique(manchas$layer_1$class_1))
manchas <- get_patches(raster, class = 1) %>%
length(terra::unique(manchas$layer_1$class_1))
library(dplyr)
manchas <- get_patches(raster, class = 1) %>%
length(terra::unique(manchas$layer_1$class_1))
get_patches(raster, class = 1) %>%
length(terra::unique(manchas$layer_1$class_1))
manchas <- get_patches(raster, class = 1) %>% length(terra::unique(manchas$layer_1$class_1))
length(terra::unique(manchas["layer_1"]["class_1"]))
length(terra::unique(manchas$layer_1$class_1))
manchas %>%
length(terra::unique(manchas$layer_1$class_1))
length(terra::unique(manchas[1][1]))
length(terra::unique(manchas[[1]][[1]]))
plot(raster, col = c("black", "#336633", "white"))
plot(raster, col = c("black", "#336600", "white"))
plot(raster, col = c("black", "#339900", "white"))
plot(raster, col = c("black", "#66cc00", "white"))
plot(raster, col = c("black", "#33ff00", "white"))
plot(raster, col = c("black", "#66cc33", "white"))
length(terra::unique(manchas$layer_1$class_1))
mutate(habitat_patches = length(terra::unique(manchas$layer_1$class_1))
manchas %>%
mutate(habitat_patches = length(terra::unique(manchas$layer_1$class_1))
manchas %>%
mutate(habitat_patches = length(terra::unique(manchas$layer_1$class_1)))
manchas %>%
summarise(habitat_patches = length(terra::unique(manchas$layer_1$class_1)))
df <- data.frame(NA, name = c("run-id" "habitat_patches"))
df <- data.frame(run-id = character(),
df <- data.frame("run-id" = character(),
"habitat_patches" = numeric())
df
df %>%
summarise(habitat_patches = length(terra::unique(manchas$layer_1$class_1)))
df <- data.frame("run-id" = character(),
"habitat_patches" = numeric(), nrow = NULL)
df
df <- data.frame("run-id" = character(),
"habitat_patches" = numeric())
df %>%
summarise(habitat_patches = length(terra::unique(manchas$layer_1$class_1)))
library(purrr)
#LÃª as pastas com as imagens
imagens <- list.files(
path = "./results/rasters/", #fuÃ§a a pasta "GALERA"
pattern = "\\.\\asc", #busca um padrÃ£o de arquivo que termine com ponto final (\\.), com pelo menos duas letras (\\w{2,}) e um "g"
full.names = TRUE, #retorna o caminho completo do arquivo
recursive = TRUE, #fuÃ§a nas subpastas do caminho escolhido
ignore.case = TRUE #ignora se o valor Ã© maiÃºsculo ou minÃºsculo
)
#LÃª as pastas com as imagens
imagens <- list.files(
path = "./results/rasters/", #fuÃ§a a pasta "GALERA"
pattern = "\\.\\w{ 3,}", #busca um padrÃ£o de arquivo que termine com ponto final (\\.), com pelo menos duas letras (\\w{2,}) e um "g"
full.names = TRUE, #retorna o caminho completo do arquivo
recursive = TRUE, #fuÃ§a nas subpastas do caminho escolhido
ignore.case = TRUE #ignora se o valor Ã© maiÃºsculo ou minÃºsculo
)
#LÃª as pastas com as imagens
imagens <- list.files(
path = "./results/rasters", #fuÃ§a a pasta "GALERA"
pattern = "\\.\\w{ 3,}", #busca um padrÃ£o de arquivo que termine com ponto final (\\.), com pelo menos duas letras (\\w{2,}) e um "g"
full.names = TRUE, #retorna o caminho completo do arquivo
recursive = TRUE, #fuÃ§a nas subpastas do caminho escolhido
ignore.case = TRUE #ignora se o valor Ã© maiÃºsculo ou minÃºsculo
)
#LÃª as pastas com as imagens
imagens <- list.files(
path = "./results/rasters", #fuÃ§a a pasta "GALERA"
pattern = "\\.\\asc", #busca um padrÃ£o de arquivo que termine com ponto final (\\.), com pelo menos duas letras (\\w{2,}) e um "g"
full.names = TRUE, #retorna o caminho completo do arquivo
recursive = TRUE, #fuÃ§a nas subpastas do caminho escolhido
ignore.case = TRUE #ignora se o valor Ã© maiÃºsculo ou minÃºsculo
)
#LÃª as pastas com as imagens
imagens <- list.files(
path = "./results/rasters", #fuÃ§a a pasta "GALERA"
#pattern = "\\.\\w{ 3,}", #busca um padrÃ£o de arquivo que termine com ponto final (\\.), com pelo menos duas letras (\\w{2,}) e um "g"
full.names = TRUE, #retorna o caminho completo do arquivo
recursive = TRUE, #fuÃ§a nas subpastas do caminho escolhido
ignore.case = TRUE #ignora se o valor Ã© maiÃºsculo ou minÃºsculo
)
imagens
#LÃª as pastas com as imagens
imagens <- list.files(
path = "./results/rasters", #fuÃ§a a pasta "GALERA"
full.names = TRUE, #retorna o caminho completo do arquivo
ignore.case = TRUE #ignora se o valor Ã© maiÃºsculo ou minÃºsculo
)
imagens %>%
str_split(., "/", #fatia o endereÃ§o completo dos arquivos baseado em / e . Aqui pode ter diferenÃ§a para o Windows em funÃ§Ã£o do uso de \ nos caminhos.
simplify = TRUE) %>%  # transforma o resultado em data frame
as_tibble()
library(stringr)
imagens %>%
str_split(., "/", #fatia o endereÃ§o completo dos arquivos baseado em / e . Aqui pode ter diferenÃ§a para o Windows em funÃ§Ã£o do uso de \ nos caminhos.
simplify = TRUE) %>%  # transforma o resultado em data frame
as_tibble()
imagens %>%
str_split(., "/", #fatia o endereÃ§o completo dos arquivos baseado em / e . Aqui pode ter diferenÃ§a para o Windows em funÃ§Ã£o do uso de \ nos caminhos.
simplify = TRUE) %>%  # transforma o resultado em data frame
as_tibble() %>%
select(V4)
# separate(col = V3,
#          into = "nome_arq",
#          sep = "\\.[[:lower:]]{2,}g$|\\.[[:upper:]]{2,}G$") %>%
# group_by(V2) %>%
nomes_img
# Cria uma tabela com a lista dos nomes dos rasters
nomes_img <- imagens %>%
str_split(., "/", #fatia o endereÃ§o completo dos arquivos baseado em / e . Aqui pode ter diferenÃ§a para o Windows em funÃ§Ã£o do uso de \ nos caminhos.
simplify = TRUE) %>%  # transforma o resultado em data frame
as_tibble() %>%
select(V4) %>%#transforma em data frame tipo tibble
# pull(V3) #transforma a coluna V2 em vetor
# separate(col = V3,
#          into = "nome_arq",
#          sep = "\\.[[:lower:]]{2,}g$|\\.[[:upper:]]{2,}G$") %>%
# group_by(V2) %>%
nest()
# Cria uma tabela com a lista dos nomes dos rasters
nomes_img <- imagens %>%
str_split(., "/", #fatia o endereÃ§o completo dos arquivos baseado em / e . Aqui pode ter diferenÃ§a para o Windows em funÃ§Ã£o do uso de \ nos caminhos.
simplify = TRUE) %>%  # transforma o resultado em data frame
as_tibble() %>%
select(V4) %>%
rename(., run-id = V4)#transforma em data frame tipo tibble
# Cria uma tabela com a lista dos nomes dos rasters
nomes_img <- imagens %>%
str_split(., "/", #fatia o endereÃ§o completo dos arquivos baseado em / e . Aqui pode ter diferenÃ§a para o Windows em funÃ§Ã£o do uso de \ nos caminhos.
simplify = TRUE) %>%  # transforma o resultado em data frame
as_tibble() %>%
select(V4) %>%
rename(., "run-id" = V4)#transforma em data frame tipo tibble
nomes_img
# Cria uma tabela com a lista dos nomes dos rasters
nomes_img <- imagens %>%
str_split(., "/", #fatia o endereÃ§o completo dos arquivos baseado em / e . Aqui pode ter diferenÃ§a para o Windows em funÃ§Ã£o do uso de \ nos caminhos.
simplify = TRUE) %>%  # transforma o resultado em data frame
as_tibble() %>%
select(V4) %>%
rename(., run_id = V4)#transforma em data frame tipo tibble
nomes_img
df <- nomes_img %>%
mutate(habitat_patches = NA)
df
df <- nomes_img %>%
mutate(habitat_patches = as.numeric())
df <- nomes_img %>%
mutate(habitat_patches = as.numeric(NA))
df
patches_number <- nomes_img %>%
mutate(habitat_patches = as.numeric(NA))
imagens %>%
str_split(., "/", #fatia o endereÃ§o completo dos arquivos baseado em / e . Aqui pode ter diferenÃ§a para o Windows em funÃ§Ã£o do uso de \ nos caminhos.
simplify = TRUE) %>%  # transforma o resultado em data frame
as_tibble()
imagens %>%
str_split(., "/", #fatia o endereÃ§o completo dos arquivos baseado em / e . Aqui pode ter diferenÃ§a para o Windows em funÃ§Ã£o do uso de \ nos caminhos.
simplify = TRUE)
imagens
